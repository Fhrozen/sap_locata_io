function check_results(results, in, opts)
% function check_results(results, in, opts)
% checks whether all fields in structure results are correctly populated
%
% Inputs:
%   results:        Structure with results (see GCC_PHAT_online)
%   opts:           Parameters generated by function init.m
%   in:                 Structure containing the following fields:
%   in.timestamps:      1 x N_opti timestamps corresponding to the optical tracking
%                       sampling rate. N_opti = recording duration [s] * f_opti, and
%                       f_opti is the sampling frequency of the optical tracking system.
%                       RESULTS MUST BE PROVIDED FOR EACH TIMESTEP IN IN.TIMESTAMPS!
%
% Outputs: N/A (function returns error if results structure is invalid)
%
% Author: Christine Evers, c.evers@imperial.ac.uk
%
% Notice: This is part of the LOCATA evaluation release. Please report
%         problems and bugs to info@locata-challenge.org.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF OPEN DATA
% COMMONS ATTRIBUTION LICENSE (ODC-BY) v1.0, WHICH CAN BE FOUND AT
% http://opendatacommons.org/licenses/by/1.0/.
% THE WORK IS PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE
% OF THE WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW
% IS PROHIBITED.
%
% BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE
% TO BE BOUND BY THE TERMS OF THIS LICENSE. TO THE EXTENT THIS LICENSE MAY
% BE CONSIDERED TO BE A CONTRACT, THE LICENSOR GRANTS YOU THE RIGHTS
% CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND
% CONDITIONS.
%
% -------------------------------------------------------------------------
%
% Representations, Warranties and Disclaimer
%
% UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING, LICENSOR
% OFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY
% KIND CONCERNING THE WORK, EXPRESS, IMPLIED, STATUTORY OR OTHERWISE,
% INCLUDING, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTIBILITY,
% FITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF
% LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OF ABSENCE OF ERRORS,
% WHETHER OR NOT DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE
% EXCLUSION OF IMPLIED WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.
%
% Limitation on Liability.
%
% EXCEPT TO THE EXTENT REQUIRED BY APPLICABLE LAW, IN NO EVENT WILL
% LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY FOR ANY SPECIAL,
% INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES ARISING OUT OF
% THIS LICENSE OR THE USE OF THE WORK, EVEN IF LICENSOR HAS BEEN ADVISED
% OF THE POSSIBILITY OF SUCH DAMAGES.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if ~isempty(setxor(fieldnames(results), {'source', 'telapsed'}))
    error('Invalid structure of results.')
end

N_sources = length(results.source);
for src_idx = 1 : N_sources
    Ns = length(in.timestamps);

    fields = fieldnames(results.source(src_idx));
    if ~isempty(setxor(fields, opts.valid_results))
        setxor(fields, opts.valid_results)
        error('Structure must contain all fields as specified in opts.valid_results.')
    end

    for f_idx = 1 : length(fields)
        if ~isempty(results.source(src_idx).(fields{f_idx})) && length(results.source(src_idx).(fields{f_idx})) ~= Ns
            error('Fields in results must be synchronized with timestamps in in.timestamps.')
        end
    end

    %% Azimuth [-pi,pi]

    if any(results.source(src_idx).azimuth < -pi) || any(results.source(src_idx).azimuth > pi)
        warning('Estimated azimuth will be wrapped between [-pi,pi] for angdiff.');
    end

    %% Elevation [-pi,pi]

    if any(results.source(src_idx).elevation < -pi) || any(results.source(src_idx).elevation > pi)
        warning('Estimated azimuth will be wrapped between [-pi,pi] for angdiff.');
    end

    %% Range (strictly positive)

    if any(results.source(src_idx).range <= 0)
        warning('Estimated range must be a positive, real number.')
    end
end
disp('Results structure valid and passed test.')

end
