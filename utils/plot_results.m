function plot_results(in, results, opts, truth, is_dev)

% function plot_results(in, results, opts, truth)
% plots results against ground truth for data of LOCATA challenge
%
% Inputs:
%   in:             Structure containing the following fields:
%   in.timestamps:   1 x N_opti vector of timestamps [s]
%   in.array:     	Structure containing array positions
%   in.array.mic:    3 x N_opti x N_mics tensor of microphone positions,
%                   where N_mics is the number of microphones
%   in.num_mics:        Number of microphones
%   results:        Structure with fields as defined in opts.valid_results
%   opts:       Structure of parameters as generated by init
%   truth:      Structure containing ground truth, with the following fields:
%   truth.source.(sourcename).azimuth:  1 x N_opti vector of source azimuth angles relative to
%                   array center. Specified in [rad], values between
%                   [-pi,pi]
%   truth.source.(sourcename).elevation:    1 x N_opti vector of source elevation angles relative to
%                   array center. Specified in [rad], values between
%                   [0, pi]
%   truth.source.(sourcename).position:     3 x N_opti matrix of source
%                   positions, specified in [m].
%   is_dev:       If 0, the evaluation database is considered and the
%                 development database otherwise.
%                 Plots will not be saved and ground-truth values not plotted
%                 if is_dev is equal to 0. 
%
% Author: Christine Evers, c.evers@imperial.ac.uk
% Modified by Heiner Loellmann, Loellmann@LNT.de
%
% Notice: This is a part of the LOCATA evaluation release. Please report
%         problems and bugs to info@locata-challenge.org.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF OPEN DATA
% COMMONS ATTRIBUTION LICENSE (ODC-BY) v1.0, WHICH CAN BE FOUND AT
% http://opendatacommons.org/licenses/by/1.0/.
% THE WORK IS PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE
% OF THE WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW
% IS PROHIBITED.
%
% BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE
% TO BE BOUND BY THE TERMS OF THIS LICENSE. TO THE EXTENT THIS LICENSE MAY
% BE CONSIDERED TO BE A CONTRACT, THE LICENSOR GRANTS YOU THE RIGHTS
% CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND
% CONDITIONS.
%
% -------------------------------------------------------------------------
%
% Representations, Warranties and Disclaimer
%
% UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING, LICENSOR
% OFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY
% KIND CONCERNING THE WORK, EXPRESS, IMPLIED, STATUTORY OR OTHERWISE,
% INCLUDING, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTIBILITY,
% FITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF
% LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OF ABSENCE OF ERRORS,
% WHETHER OR NOT DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE
% EXCLUSION OF IMPLIED WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.
%
% Limitation on Liability.
%
% EXCEPT TO THE EXTENT REQUIRED BY APPLICABLE LAW, IN NO EVENT WILL
% LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY FOR ANY SPECIAL,
% INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES ARISING OUT OF
% THIS LICENSE OR THE USE OF THE WORK, EVEN IF LICENSOR HAS BEEN ADVISED
% OF THE POSSIBILITY OF SUCH DAMAGES.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

close all; clear fig_hdls;

[srt_idx, end_idx] = regexp(in.plot_title, '[0-9]*');
task_ID = in.plot_title(srt_idx(1):end_idx(1));
rec_ID = in.plot_title(srt_idx(2):end_idx(2));
array_ID = in.array_name;

%% Plot scene

fig_hdls(1) = figure; hold on;
if is_dev
    for src_idx = 1:length(opts.valid_sources)
        src = opts.valid_sources{src_idx};
        if ~isempty(intersect(src, fieldnames(truth.source)))
            plot3(truth.source.(src).position(1,:), truth.source.(src).position(2,:), truth.source.(src).position(3,:), 'x');
        end
    end
end
plot3(in.array.position(1,:), in.array.position(2,:), in.array.position(3,:), 'r*');
for m = 1 : in.numMics
    plot3(squeeze(in.array.mic(1,:,m)), squeeze(in.array.mic(2,:,m)), squeeze(in.array.mic(3,:,m)), 'ro');
end
view(3);
grid on;
xlabel('x \rightarrow')
ylabel('y \rightarrow')
zlabel('z \rightarrow')
v = axis; v(5) = 0; axis(v)

if is_dev 
    % plots should not be save for the submission results!
    saveas(fig_hdls(1), [in.results_dir filesep 'scene_', array_ID, '_task', num2str(task_ID), '_recording', num2str(rec_ID), '.fig']);
end

%% Plot signal

fig_hdls(end+1) = figure;
if ~isempty( results.source(1).elevation)
    subplot(3,1,1);
else
    subplot(2,1,1);
end
t = linspace(0,(size(in.y,2)-1)/in.fs, size(in.y,2));
valid_idx = find(t <= in.timestamps(end));
plot(t(valid_idx), in.y(1,valid_idx));
v = axis; v(1) = 0; v(2) = in.timestamps(end); axis(v);
xlabel('Time, $t$, [s]', 'interpreter', 'latex');
ylabel('Amplitude', 'interpreter', 'latex');
grid on;
title(in.plot_title);

%% Plot azimuth angle

h_est_az = [];
for src_idx = 1 : length(results.source)
    if ~isempty( results.source(src_idx).azimuth)
        if ~isempty( results.source(src_idx).elevation)
            subplot(3,1,2);
        else
            subplot(2,1,2);
        end
        hold on; grid on; axis([0 in.timestamps(end) -180 180]);
        xlabel('Time, $t$, [s]', 'interpreter', 'latex');
        ylabel('Azimuth [deg]', 'interpreter', 'latex');

        h_est_az = plot(results.source(src_idx).timestamps, rad2deg(wrapToPi(results.source(src_idx).azimuth)), 'bo');
    end
end
drawnow;

if is_dev
    if ~isempty(h_est_az)
        for src_idx = 1:length(opts.valid_sources)
            src = opts.valid_sources{src_idx};
            if ~isempty(intersect(src, fieldnames(truth.source)))
                % Plot the ground truth
                h_true = plot(in.timestamps, rad2deg(truth.source.(src).azimuth), 'rx');
            end
        end
        box on
        legend([h_true, h_est_az], {'ground truth','estimate'},'Location','northeast','interpreter', 'latex')
        
        drawnow;
        
        saveas(fig_hdls(end), [in.results_dir filesep 'MUSIC_', array_ID, '_task', num2str(task_ID), '_recording', num2str(rec_ID), '.fig']);
    end
end

%% Plot elevation angle

h_est_el = [];
for src_idx = 1 : length(results.source)
    if ~isempty( results.source(src_idx).elevation)
        subplot(3,1,3);
        hold on; grid on; axis([0 in.timestamps(end) -180 180]);
        xlabel('Time, $t$, [s]', 'interpreter', 'latex');
        ylabel('Elevation [deg]', 'interpreter', 'latex');

        h_est_el = plot(results.source(src_idx).timestamps, rad2deg(wrapToPi(results.source(src_idx).elevation)), 'bo');
    end
end
drawnow;

if is_dev
    if ~isempty(h_est_el)
        for src_idx = 1:length(opts.valid_sources)
            src = opts.valid_sources{src_idx};
            if ~isempty(intersect(src, fieldnames(truth.source)))
                % Plot the ground truth
                h_true = plot(in.timestamps, rad2deg(truth.source.(src).elevation), 'rx');
            end
        end
        box on
        legend([h_true, h_est_el], {'ground truth','estimate'},'Location','northeast','interpreter', 'latex')
        title(in.plot_title);
        
        drawnow;
        
        saveas(fig_hdls(end), [in.results_dir filesep 'MUSIC_', array_ID, '_task', num2str(task_ID), '_recording', num2str(rec_ID), '.fig']);
    end
end

%% Plot mic positions

% Plot mic positions for a single frame to visualize mic geometry:
fig_hdls(end+1) = figure; 
frame_idx = 1;
plot3(squeeze(in.array.mic(1,frame_idx,:)), squeeze(in.array.mic(2,frame_idx,:)), squeeze(in.array.mic(3,frame_idx,:)), 'x')
hold on;
for m = 1 : size(in.array.mic,3)
    text(in.array.mic(1,frame_idx,m), in.array.mic(2,frame_idx,m), in.array.mic(3,frame_idx,m), num2str(m))
end
grid on; xlabel('x \rightarrow'); ylabel('y \rightarrow'); zlabel('z \rightarrow');
view(2);

if is_dev 
    % plots should not be save for the submission results!
    saveas(fig_hdls(end), [in.results_dir filesep 'mics-', array_ID, '_task', num2str(task_ID), '_recording', num2str(rec_ID), ...
        '_frame', num2str(frame_idx), '.fig']);
end

end
